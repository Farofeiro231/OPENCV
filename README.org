* Overview
This repository's goal is to hold my work for the Digital Image Processig course at UFRN. The programs here contained are of escalating complexity, starting with simple pixel manipulations in an image, going through video file manipulations until image frequency filtering.
* Pixel and region manipulation
Within the *pixel-manipulation* folder, there are a few simple programs. The first program (/pixels.cpp/) is a simple region manipulation one, where a strip of the image is painted in orange. The operation there performed is shown below. It works simply by opening an image file, determining a rectangular region to be written to and looping through its pixels to change their color one by one. I could certainly do this in a smarter and faster way, but the intent of the exercise was to make us used to working and manipulating pixels.

|----------------------+------------------------------|
| Original image       | Strip-modified image         |
|----------------------+------------------------------|
| [[./figuras/bolhas.png]] | [[./figuras/strip-modified.png]] |
|----------------------+------------------------------|

The /pixel-manip.cpp/ only opens the image passed as an argument and converts it to a grayscale image, hence I won't discuss it any further. The /regions.cpp/ program, however, is a bit more interesting; in it, the user passes an image image during the function call for the program to "negate" one portion of it; it works as follows: once the image is open, it is converted to a grayscale image (to simplify the procedure) and the user is asked for two (x, y) points, one for the upper-left corner of the negative rectangle to be created, and the other for the bottom-right corner. Once the two points are provided, every pixel within that zone has its value replace by the corresponding negative value; i.e.:

[[./figuras/negative-equation.png]]

 Below is the result of applying the negative effect to an area delimited by P1 = (50, 100) and P2 = (300, 500) on the Lenna image.

|----------------------+------------------------------|
| Original Lenna image | Modified Lenna image         |
|----------------------+------------------------------|
| [[./figuras/Lenna.png]]  | [[./figuras/negative-lenna.png]] |
|----------------------+------------------------------|

The last program in this section is the one in the /swap-regions.cpp/ file. As its name suggests, this program takes an image and swaps its portions located in opposite quadrants (as in the for quadrants in a cartesian plan). The code mechanism is very simple; all of the work is done by the *swap_image* function: it takes the source image and the image (both are OPENCV Mat objects) that will receive the modified image resulting from the operation. Innside it, another Mat object of size of a single quadrant (i.e.: half the height and half the width of the original image) is created containing all zeros; then, one by one, the quadrants of the output image are replaced by the sum of this newly created all-zeros Mat with the opposing portion of the original image (the sum is necessary to create a new Mat object and to avoid modifying the original image in the swapping process). Running the program on the Lenna image yields the results shown bellow.

|----------------------+-----------------------------|
| Original Lenna image | Modified Lenna image        |
|----------------------+-----------------------------|
| [[./figuras/Lenna.png]] | [[./figuras/swapped-lenna.png]] |
|----------------------+-----------------------------|
